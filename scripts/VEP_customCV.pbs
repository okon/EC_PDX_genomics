#!/bin/bash
################################################################################
################################################################################
#PBS -M olga.kondrashova@qimrberghofer.edu.au
#PBS -N VEP
#PBS -S /bin/bash
#PBS -j n
#PBS -l walltime=10:00:00
#PBS -l ncpus=2
#PBS -l mem=6gb
#PBS -m ae
#PBS -W umask=0007
#PBS -J 1-39
################################################################################
################################################################################

set -e
#
#function usage() {
#    echo -e "Usage: qsub -v input_file=FILE,output_dir=DIR $0\n"
#}
#
#if [[ -z "${input_file}" || ! -f "${input_file}" ]]; then
#  echo "Could not find input file" >&2
#  usage
#  exit 1
#fi
#
#if [[ -z "${output_dir}" || ! -d "${output_dir}" ]]; then
#  echo "Could not find output directory" >&2
#  usage
# exit 1
#fi

#module load perl/5.22
module load testing/1.0 vep/92.3

#export PATH="$HOME/.vep/Plugins:${PATH}"
#export PERL5LIB="$HOME/.vep/Plugins:$PERL5LIB"

output_dir="/working/lab_nicw/olgaK/Pollock_endometrial_PDX_manuscript/data/processed/MAFs/BROCA"

n=1
#for f in ${output_dir}/*filt_som.BROCA.vcf; 
#for f in ${output_dir}/*filt_som.BROCA.input_vep.tsv; 
for f in ${output_dir}/*gpc.BROCA.input_vep.tsv; 
do
	file_input_array[$n]=${f}
	((n++))
done

input_file="${file_input_array[$PBS_ARRAY_INDEX]}"


output_filestem="${output_dir}/$(basename "${input_file}" ".input_vep.tsv")"

echo $output_filestem 
env

cmd=(vep)

cmd+=(--input_file "${input_file}")
cmd+=(--everything)
cmd+=(--species homo_sapiens)
cmd+=(--assembly GRCh37)
#cmd+=(--compress_output gzip)
cmd+=(--output_file "${output_filestem}.vep.tsv")
cmd+=(--stats_file "${output_filestem}.html")
cmd+=(--warning_file stderr)
cmd+=(--cache)
cmd+=(--dir_cache /reference/software/vep/92)
cmd+=(--dir_plugins "${HOME}/.vep/VEP_plugins")
#cmd+=(--no_progress)
cmd+=(--offline)
cmd+=(--plugin "ExAC,/reference/data/ExAC/release1/subsets/ExAC_nonTCGA.r1.sites.vep.vcf.gz,AC,AN")
cmd+=(--plugin "ExACpLI")
cmd+=(--plugin "CADD,/reference/software/CADD/CADD-1.3/whole_genome_SNVs.tsv.gz,/reference/software/CADD/CADD-1.3/InDels.tsv.gz")
cmd+=(--plugin "dbNSFP,/reference/data/dbNSFP/2.9.3/dbNSFP2.9.3.gz,ALL")
cmd+=(--plugin "dbscSNV,/reference/data/dbscSNV/1.1/dbscSNV1.1.txt.gz")
cmd+=(--plugin "MaxEntScan,/reference/data/MaxEntScan/fordownload,SWA,NCSS,verbose")
cmd+=(--plugin "REVEL,/working/genomeinfo/share/REVEL/revel_all_chromosomes.tsv.gz")
#cmd+=(--plugin "ClinVar,/working/genomeinfo/share/ClinVar/output/b37/single/clinvar_alleles.single.b37.vcf.gz,/working/genomeinfo/share/ClinVar/output/b37/multi/clinvar_alleles.multi.b37.vcf.gz")
cmd+=(--plugin "HGVSIntronOffset")
cmd+=(--plugin "LRG_RefSeqGene,/working/genomeinfo/share/LRG_RefSeqGene/LRG_RefSeqGene")
cmd+=(--plugin "PROVEAN,/working/lab_nicw/olgaK/provean/cache,/working/lab_nicw/olgaK/Spurdle_endo_case-control/newjobs_30genes.txt")
#cmd+=(--plugin "gnomAD,/reference/data/gnomAD/gnomad-public/r2.1.1/vcf/genomes,ALL")
#cmd+=(--plugin "gnomADc,/reference/data/gnomAD/gnomad-public/r2.0.2/coverage/genomes") # keeping old version for cov because plugin doesnt work for r.2.1.1
cmd+=(--plugin "gnomAD,/reference/data/gnomAD/gnomad-public/r2.1.1/vcf/exomes,non_cancer_AC_nfe,non_cancer_AN_nfe,non_cancer_nhomalt_nfe")
#cmd+=(--plugin "gnomADc,/reference/data/gnomAD/gnomad-public/r2.0.2/coverage/exomes") # keeping old version for cov because plugin doesnt work for r.2.1.1
cmd+=(--custom /working/genomeinfo/share/olgaK/parse_ClinVar_vcfs/parsed_vcf/clinvar_20200203.xml_parsed.vcf.gz,ClinVar,vcf,exact,0,ALLELEID,CLNDN,CLNDNINCL,CLNDISDB,CLNDISDBINCL,CLNHGVS,CLNREVSTAT,CLNSIG,CLNSIGCONF,CLNSIGINCL,CLNVC,CLNVCSO,CLNVI,DBVARID,GENEINFO,MC,ORIGIN,RS,SSR,CLNSUBA,CLNSIGA,CLNDATEA,CLNDATESUBA,CLNREVSTATA,CLNORA,CLNSCVA,CLNDNA,CLNCOMA)
cmd+=(--tab)
cmd+=(--dont_skip)
cmd+=(--allow_non_variant)
cmd+=(--fasta /reference/genomes/GRCh37_ICGC_standard_v2/indexes/SAMTOOLS_1.4/GRCh37_ICGC_standard_v2.fa)
cmd+=(--force_overwrite)
cmd+=(--merged)
cmd+=(--no_escape)
cmd+=(--fork 1)

###########
# Run VEP #
###########

stdout="${output_filestem}.out"
stderr="${output_filestem}.err"

echo "${cmd[@]}" >> "${output_filestem}.log"

"${cmd[@]}" 1> "${stdout}" 2> "${stderr}"

#####################
# Filter VEP output #
#####################

#filter_vep \
#  --format tab \
#  --filter "CANONICAL is YES" \
#  -i "${output_filestem}.tsv.gz" \
#  -o "${output_filestem}.canonical.tsv"

